{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d16c2631-1cc3-4c9f-88f6-2a5d3918f43f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "import datetime\n",
    "import csv\n",
    "import nltk\n",
    "import ssl\n",
    "import streamlit as st\n",
    "import random\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8fdb86ad-e492-4837-838f-e500e5deafc2",
   "metadata": {
    "scrolled": True
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /home/asus/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "ssl._create_default_https_context = ssl._create_unverified_context\n",
    "nltk.data.path.append(os.path.abspath(\"nltk_data\"))\n",
    "nltk.download('punkt')\n",
    "\n",
    "# Load intents from the JSON file\n",
    "file_path = os.path.abspath(\"/home/asus/Downloads/intents.json\")\n",
    "with open(file_path, \"r\") as file:\n",
    "    intents = json.load(file)\n",
    "\n",
    "# Create the vectorizer and classifier\n",
    "vectorizer = TfidfVectorizer()\n",
    "clf = LogisticRegression(random_state=0, max_iter=10000)\n",
    "\n",
    "# Preprocess the data\n",
    "tags = []\n",
    "patterns = []\n",
    "for intent in intents:\n",
    "    for pattern in intent['patterns']:\n",
    "        tags.append(intent['tag'])\n",
    "        patterns.append(pattern)\n",
    "\n",
    "# Train the model\n",
    "x = vectorizer.fit_transform(patterns)\n",
    "y = tags\n",
    "clf.fit(x, y)\n",
    "\n",
    "def chatbot(input_text):\n",
    "    input_text = vectorizer.transform([input_text])\n",
    "    tag = clf.predict(input_text)[0]\n",
    "    for intent in intents:\n",
    "        if intent['tag'] == tag:\n",
    "            response = random.choice(intent['responses'])\n",
    "            return response\n",
    "        \n",
    "counter = 0\n",
    "\n",
    "# Add custom CSS \n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <style>\n",
    "    body {\n",
    "        background-color: #95a5a6  ;\n",
    "    }\n",
    "    .main {\n",
    "        background-color: #2c3e50 ;\n",
    "        border: 1px solid #2c3e50;\n",
    "        border-radius: 10px;\n",
    "        padding: 20px;\n",
    "        box-shadow: 2px 2px 10px #CCCCCC;\n",
    "    }\n",
    "    .stButton button {\n",
    "        background-color: #2c3e50;\n",
    "        color: #808b96 ;\n",
    "        border-radius: 8px;\n",
    "        border: none;\n",
    "        font-size: 16px;\n",
    "        font-weight: bold;\n",
    "        padding: 10px 20px;\n",
    "        margin: 5px;\n",
    "    }\n",
    "    .stButton button:hover {\n",
    "        background-color: #2c3e50 ;\n",
    "    }\n",
    "    .stSidebar {\n",
    "        background-color: #808b96;\n",
    "        color: white;\n",
    "    }\n",
    "    .stMarkdown {\n",
    "        background-color: #808b96 ;\n",
    "        padding: 10px;\n",
    "        border-radius: 8px;\n",
    "    }\n",
    "    </style>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True,\n",
    ")\n",
    "\n",
    "def main():\n",
    "    global counter\n",
    "    st.title(\"ðŸ¤– Freindly Chatbot\")\n",
    "    st.markdown(\"**Intents-based chatbot with interactive responses**\")\n",
    "\n",
    "    # Create a sidebar menu with options\n",
    "    menu = [\"Home\", \"Conversation History\", \"About\"]\n",
    "    choice = st.sidebar.selectbox(\"Menu\", menu)\n",
    "\n",
    "    # Home Menu\n",
    "    if choice == \"Home\":\n",
    "        st.write(\"Welcome to the chatbot. Please type a message and press Enter to start the conversation.\")\n",
    "\n",
    "        # Check if the chat_log.csv file exists, and if not, create it with column names\n",
    "        if not os.path.exists('/home/asus/Downloads/chat_log.csv'):\n",
    "            with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:\n",
    "                csv_writer = csv.writer(csvfile)\n",
    "                csv_writer.writerow(['User Input', 'Chatbot Response', 'Timestamp'])\n",
    "\n",
    "        counter += 1\n",
    "        user_input = st.text_input(\"You:\", key=f\"user_input_{counter}\")\n",
    "\n",
    "        if user_input:\n",
    "\n",
    "            # Convert the user input to a string\n",
    "            user_input_str = str(user_input)\n",
    "\n",
    "            response = chatbot(user_input)\n",
    "            st.text_area(\"Chatbot:\", value=response, height=120, max_chars=None, key=f\"chatbot_response_{counter}\")\n",
    "\n",
    "            # Get the current timestamp\n",
    "            timestamp = datetime.datetime.now().strftime(f\"%Y-%m-%d %H:%M:%S\")\n",
    "\n",
    "            # Save the user input and chatbot response to the chat_log.csv file\n",
    "            with open('chat_log.csv', 'a', newline='', encoding='utf-8') as csvfile:\n",
    "                csv_writer = csv.writer(csvfile)\n",
    "                csv_writer.writerow([user_input_str, response, timestamp])\n",
    "\n",
    "            if response.lower() in ['goodbye', 'bye']:\n",
    "                st.write(\"Thank you for chatting with me. Have a great day!\")\n",
    "                st.stop()\n",
    "\n",
    "    # Conversation History Menu\n",
    "    elif choice == \"Conversation History\":\n",
    "        st.header(\"Conversation History\")\n",
    "        if os.path.exists('chat_log.csv'):\n",
    "            with open('chat_log.csv', 'r', encoding='utf-8') as csvfile:\n",
    "                csv_reader = csv.reader(csvfile)\n",
    "                next(csv_reader)  # Skip the header row\n",
    "                for row in csv_reader:\n",
    "                    st.text(f\"User: {row[0]}\")\n",
    "                    st.text(f\"Chatbot: {row[1]}\")\n",
    "                    st.text(f\"Timestamp: {row[2]}\")\n",
    "                    st.markdown(\"---\")\n",
    "        else:\n",
    "            st.write(\"No conversation history available.\")\n",
    "\n",
    "    elif choice == \"About\":\n",
    "        st.write(\"The goal of this project is to create a chatbot that can understand and respond to user input based on intents.\")\n",
    "        st.subheader(\"Project Overview\")\n",
    "        st.write(\"\"\"\n",
    "        This project uses natural language processing (NLP) with Logistic Regression for intent recognition. \n",
    "        It provides a simple chatbot interface using Streamlit and NLP.\n",
    "        \"\"\")\n",
    "        st.subheader(\"Features:\")\n",
    "        st.write(\"\"\"\n",
    "        - Natural Language Processing for text understanding.\n",
    "        - User-friendly interface with Streamlit.\n",
    "        - Saves conversation history for review.\n",
    "        \"\"\")\n",
    "        st.subheader(\"Conclusion\")\n",
    "        st.write(\"This chatbot is a proof-of-concept and can be expanded with more advanced features.\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "5a3f137b-2468-4126-9b37-78756d52cabe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
